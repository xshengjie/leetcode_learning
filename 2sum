class Solution:
    def twoSum(self, nums, target):
        """
        :type nums: List[int]
        :type target: int
        :rtype: List[int]
        """
        if len(nums)<=1:
            return False
        #buff_dict is a dict that index is the num we wanted.the num's index is the other half num we have.
        buff_dict={}#key is the target,value is the index
        for index,num in enumerate(nums):#index  ,num
            if num in buff_dict:#if the expected num in the buff_dict ,so the other half's index is in the values
                return [buff_dict[num],index]
            else:#else :set the expected num as the index ,values is the half's num's index
                buff_dict[target-num]=index

def stringToIntegerList(input):
    return json.loads(input)

def integerListToString(nums, len_of_list=None):
    if not len_of_list:
        len_of_list = len(nums)
    return json.dumps(nums[:len_of_list])

def main():
    import sys
    def readlines():
        for line in sys.stdin:
            yield line.strip('\n')

    lines = readlines()
    while True:
        try:
            line = lines.next()
            nums = stringToIntegerList(line);
            line = lines.next()
            target = int(line);
            
            ret = Solution().twoSum(nums, target)

            out = integerListToString(ret);
            print(out)
        except StopIteration:
            break

if __name__ == '__main__':
    main()
